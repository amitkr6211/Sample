# -*- coding: utf-8 -*-
"""IIT2018131_A3_Encryption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mIcvUv5IhrN20zbyq5sthhnDVudSUz5c
"""

import math
import random

def choosePrime() : 
  while True:
    r1 = random.randint(100,300)
    r2 = random.randint(100,300)

    fo = open("/content/list_of_primes.txt",'r')
    primes = fo.read().splitlines()
    fo.close()
    
    p = int(primes[r1])
    q = int(primes[r2])
    if p != q:
      return p,q

def egcd(e,r):
  while r!=0 :
    e,r=r,e%r
  return e

def xgcd(a, b):
    x, old_x = 0, 1
    y, old_y = 1, 0

    while (b != 0):
        quotient = a // b
        a, b = b, a - quotient * b
        old_x, x = x, old_x - quotient * x
        old_y, y = y, old_y - quotient * y

    return a, old_x, old_y

def encryption(public_key,message,block_size):

  e,n = public_key
  eBlocks = []
  eText = -1
  if len(message[0]):
    eText = ord(message[0])
  # flag = True
  count = 0
  for i in message:
    if count == 0:
      # flag = False
      count += 1
      continue
    if count%block_size == 0:
      eBlocks.append(eText)
      eText = 0
    eText = eText*1000 + ord(i)
    count += 1
  eBlocks.append(eText)

  for i in range(len(eBlocks)):
    eBlocks[i] = (eBlocks[i]**e)%n   

  return eBlocks

print("RSA Encryption")
print("Choosing prime numbers randomly....")
p,q = choosePrime()
print("p = ",p)
print("q = ",q)
# print(p,q)

n = p*q
phi = (p-1)*(q-1)
print("n = ",n,"\nphi = ",phi)
e = 0
while True:
  e = random.randint(2,phi)
  if egcd(e,phi) == 1:
    break
d = 0
gcd, x, y = xgcd(e,phi)
if (x < 0):
  d = x + phi
else:
  d = x
# d = mult_inv(e,phi)

print("e = ",e,"\nd = ",d)

public_key = (e,n)
print("public key = ",public_key)
f_private = open('private_key.txt', 'w')
f_private.write(str(n) + '\n')
f_private.write(str(d) + '\n')
f_private.close()
print("Private key stored in file private_key.txt")

message = input("Enter message to encrypt: ")
block_size = int(input("Enter block size: "))

print("Encrypting......")
print("Encrypted message is: ",encryption(public_key,message,block_size))

